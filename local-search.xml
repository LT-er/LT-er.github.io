<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CNNGraduationProject</title>
    <link href="/2024/03/21/CNNGraduationProject/"/>
    <url>/2024/03/21/CNNGraduationProject/</url>
    
    <content type="html"><![CDATA[<h2 id="一天速做cnn毕设">一天速做CNN毕设</h2><p>题目是工件毛刺图像采集与分类方法研究，基本上做完了，代码和我处理过的数据啥的都放到github了</p><p>至于每个文件干啥的看名字就行，目录结构也比较简单</p><p><ahref="https://github.com/ltspace/CNNGraduationProject">ltspace/CNNGraduationProject(github.com)</a></p><hr /><p>寒假前，老师让他研究生领着我去实验室用工业照相机给几种工件拍了照，</p><p>这就是图像采集部分了吧（什），感觉样本数量本身挺少的，拍照拍不出个花来，</p><figure><img src="/images/image-20240321235559628.png"alt="image-20240321235559628" /><figcaption aria-hidden="true">image-20240321235559628</figcaption></figure><p>其实塑料毛刺本身分为很多类，比如翻转毛刺，撕裂毛刺，切断毛刺，</p><p>但是图像比较糊，工件也不一样，数据量也少，我也不是毛刺专家，分辨不太出来，所以打算直接二分类成有无毛刺。</p><h3 id="数据预处理">数据预处理</h3><p>前几天开始的时候用PS抠图，把每个工件抠出来，生成透明背景的png图，还用用vott标注了一下毛刺位置，后来一想不用做那么精细，直接用csv标注得了</p><p>先把用ps抠出来的的一个个透明背景的工件背景设为黑色，rgba转rgb</p><p>然后把不规则的图片图形用黑色填充为正方形，</p><p>想用GAN生成点儿数据，挪用了之前64x64的，当时工作是正常的，</p><p>cpu训太慢了，想用3070训，装CUDA，装完加环境变量里重启</p><p>又发现自己的pytorch是cpu版的，和cuda也不配，又去换</p><p>跑起来了 ，但是训练到到第二轮就开始模式崩溃，</p><p>gan的代码是64size直接改的，只改了size和卷积层加到了256，怀疑是因为没有调整其他超参数</p><p>lr从0.0003降低到0.0001，学的慢，但依然模式崩溃</p><p>怀疑是自己给的是不同的工件的图像，只留下一种训练，依然模式崩溃</p><p>为了平衡，减少判别器更新，依然模式崩溃</p><p>调整真实样本的标签值real_label = 0.9，依然模式崩溃</p><p>转用imgaug和albumentations数据增强</p><p>imagaug没问题，试用album的时候生成的图像全黑</p><p>删去normalize的部分，生成正常</p><p>毛刺正好在图像的最边缘，不能裁切</p><p>脚本图片名称规格化，</p><p>脚本256-&gt;224，发现生成了全是名字为1.png之类的文件夹，发现是目录结构得在上一层，不能直接放在文件夹里边，还得新建个文件夹嵌套一下，有的需要这样有的不需要</p><p>把所有的生成的样本收集到一个文件夹，</p><p>脚本创建CSV填好名称，打标签，化身数据标注女工</p><p>0无1有</p><p>一共六种工件，后来看了看数据处理完的实际情况，觉得其实能用的只有1和3，所以只训了两种</p><h3 id="训练">训练</h3><p>本来打算用VGG微调，改变心意，想用ResNet，</p><p>一共75张，选层数少的resnet18或者34，防止过拟合</p><p>选用resnet18，将其全连接层修改为适合二分类任务的形式然后设置为训练模式</p><p>数据集划分想用k折交叉验证，后来嫌麻烦，就随机二八划分了</p><p>定义交叉熵损失函数和 Adam 优化器</p><p>循环训练模型并在验证集上评估模型性能，输出每个 epoch的训练损失和验证损失</p><p>损失搞成一个列表 每一轮加到列表里，最后图像生成</p><p>开始训练，100epoch，后来觉得太多了，改成50</p><p>最后在整个数据集上再测试一下正确率</p><p>第一种工件最后正确率98.6%</p><figure><img src="/images/Snipaste_2024-03-21_17-06-35.png"alt="Snipaste_2024-03-21_17-06-35" /><figcaption aria-hidden="true">Snipaste_2024-03-21_17-06-35</figcaption></figure><p>第二种96.875%</p><figure><img src="/images/Snipaste_2024-03-21_20-10-21.png"alt="Snipaste_2024-03-21_20-10-21" /><figcaption aria-hidden="true">Snipaste_2024-03-21_20-10-21</figcaption></figure><p>也算都收敛了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>实物展示</title>
    <link href="/2024/03/18/show/"/>
    <url>/2024/03/18/show/</url>
    
    <content type="html"><![CDATA[<figure><img src="/images/IMG_20240318_182344.jpg" alt="IMG_20240318_182344" /><figcaption aria-hidden="true">IMG_20240318_182344</figcaption></figure><figure><img src="/images/IMG_20240318_185009.jpg" alt="IMG_20240318_185009" /><figcaption aria-hidden="true">IMG_20240318_185009</figcaption></figure><figure><img src="/images/IMG_20240318_185030.jpg" alt="IMG_20240318_185030" /><figcaption aria-hidden="true">IMG_20240318_185030</figcaption></figure><figure><img src="/images/IMG_20240318_185048.jpg" alt="IMG_20240318_185048" /><figcaption aria-hidden="true">IMG_20240318_185048</figcaption></figure><figure><img src="/images/IMG_20240318_182320.jpg" alt="IMG_20240318_182320" /><figcaption aria-hidden="true">IMG_20240318_182320</figcaption></figure><figure><img src="/images/IMG_20240318_183304.jpg" alt="IMG_20240318_183304" /><figcaption aria-hidden="true">IMG_20240318_183304</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DAY6日寄-展示</title>
    <link href="/2024/03/12/PCB/"/>
    <url>/2024/03/12/PCB/</url>
    
    <content type="html"><![CDATA[<p>以为毕设要做出一个成品来，</p><p>于是认真地把板子大小缩了再缩，最后缩到55mm*66mm，</p><p>这么大点儿空，布线差点儿布emo，</p><p>选的都是贴片类型的元件，全贴在PCB上，甚至还打算加装一个外壳，</p><p>为了缩减成本，选料也选了一阵子，最终缩减到104，</p><p>然后打算SMT的时候发现最少贴俩，材料费200多，加工费400多。</p><p><br></p><p>汗流浃背，问老师咋整，</p><p>——要不我用用咱院里的电焊，买材料回来自己焊？</p><p><br></p><p>老师说——</p><p>其实不用做出成品，写在论文里就行。</p><p><br></p><p>最后决定用嵌入式课程发的单片机简单实现一下。</p><p>嵌入式主要感谢这个教程</p><p><ahref="https://www.bilibili.com/video/BV1HH4y1o7EN/?spm_id_from=333.880.my_history.page.click&amp;vd_source=e404ad14246992bcc3e4ac52a33df8ed">小白物联网智能家居毕设参考STM32+ESP8266/MQTT+OneNet+UniApp_哔哩哔哩_bilibili</a></p><p><br></p><p><br></p><p>好不容易整出来了，还是得展示一下。</p><p><br></p><h3 id="原理图">原理图</h3><p>右上角是我从嘉立创随便找的开源stm32最小系统板，</p><p><ahref="https://oshwhub.com/dian-xie-eda/stm32f103c8t6">STM32F103C8T6 -嘉立创EDA开源硬件平台 (oshwhub.com)</a></p><p>除了stm32之外的是我自己整的，</p><p>此处感谢这几个教程</p><p><ahref="https://www.bilibili.com/video/BV1fM411Z7cW?p=1&amp;vd_source=e404ad14246992bcc3e4ac52a33df8ed">00-0-课程介绍_哔哩哔哩_bilibili</a></p><p><ahref="https://www.bilibili.com/video/BV13d4y1L7Rg/?spm_id_from=333.788&amp;vd_source=e404ad14246992bcc3e4ac52a33df8ed">带着你从手册开始画板STM最小系统板教程系列(一)_哔哩哔哩_bilibili</a></p><p><ahref="https://www.bilibili.com/video/BV12M4y1N7MZ/?spm_id_from=333.880.my_history.page.click&amp;vd_source=e404ad14246992bcc3e4ac52a33df8ed">09STM32F103C8T6最小系统_哔哩哔哩_bilibili</a></p><figure><img src="/images/image-20240312155432510.png"alt="image-20240312155432510" /><figcaption aria-hidden="true">image-20240312155432510</figcaption></figure><h3 id="pcb布局">PCB布局</h3><p>按模块随便布的</p><figure><img src="/images/Snipaste_2024-03-11_22-05-04.png"alt="Snipaste_2024-03-11_22-05-04" /><figcaption aria-hidden="true">Snipaste_2024-03-11_22-05-04</figcaption></figure><h3 id="飞线">飞线</h3><p>没有什么是过孔解决不了的</p><figure><img src="/images/Snipaste_2024-03-12_11-30-01.png"alt="Snipaste_2024-03-12_11-30-01" /><figcaption aria-hidden="true">Snipaste_2024-03-12_11-30-01</figcaption></figure><p><img src="/images/Snipaste_2024-03-12_12-08-57.png"alt="Snipaste_2024-03-12_12-08-57" /><imgsrc="/images/Snipaste_2024-03-12_12-15-41.png"alt="Snipaste_2024-03-12_12-15-41" /></p><p>又去听了听教程，然后发现晶振里边走线不太好，紧急修改</p><figure><img src="/images/Snipaste_2024-03-12_12-28-57.png"alt="Snipaste_2024-03-12_12-28-57" /><figcaption aria-hidden="true">Snipaste_2024-03-12_12-28-57</figcaption></figure><h3 id="覆铜">覆铜</h3><figure><img src="/images/Snipaste_2024-03-12_12-48-11.png"alt="Snipaste_2024-03-12_12-48-11" /><figcaption aria-hidden="true">Snipaste_2024-03-12_12-48-11</figcaption></figure><figure><img src="/images/image-20240312160729545.png"alt="image-20240312160729545" /><figcaption aria-hidden="true">image-20240312160729545</figcaption></figure><h3 id="d模型">3D模型</h3><figure><img src="/images/Snipaste_2024-03-12_15-22-45.png"alt="Snipaste_2024-03-12_15-22-45" /><figcaption aria-hidden="true">Snipaste_2024-03-12_15-22-45</figcaption></figure><figure><img src="/images/Snipaste_2024-03-12_15-22-53.png"alt="Snipaste_2024-03-12_15-22-53" /><figcaption aria-hidden="true">Snipaste_2024-03-12_15-22-53</figcaption></figure><h3 id="打样">打样</h3><figure><img src="/images/Snipaste_2024-03-12_15-21-46.png"alt="Snipaste_2024-03-12_15-21-46" /><figcaption aria-hidden="true">Snipaste_2024-03-12_15-21-46</figcaption></figure><figure><img src="/images/Snipaste_2024-03-12_15-21-19.png"alt="Snipaste_2024-03-12_15-21-19" /><figcaption aria-hidden="true">Snipaste_2024-03-12_15-21-19</figcaption></figure><p>最后选的白色</p><h3 id="一些细节图">一些细节图</h3><figure><img src="/images/image-20240312161133819.png"alt="image-20240312161133819" /><figcaption aria-hidden="true">image-20240312161133819</figcaption></figure><figure><img src="/images/image-20240312161149861.png"alt="image-20240312161149861" /><figcaption aria-hidden="true">image-20240312161149861</figcaption></figure><figure><img src="/images/image-20240312161240286.png"alt="image-20240312161240286" /><figcaption aria-hidden="true">image-20240312161240286</figcaption></figure><p>结语：</p><p>当个layout工程师也挺好的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置博客自动改图片路径和自动剪切图片的尝试</title>
    <link href="/2024/03/09/try/"/>
    <url>/2024/03/09/try/</url>
    
    <content type="html"><![CDATA[<h3 id="regex-r..">regex = r'![.<em>?]((.</em>?))'</h3><p>这个正则表达式是用来匹配Markdown文档中图片链接格式的。</p><p>让我们逐步分解一下这个正则表达式：</p><ul><li><code>!</code>:在Markdown中，图片链接是以感叹号<code>!</code>开头的，所以正则表达式首先会查找感叹号。</li><li><code>[`: 紧跟着感叹号的是一个左方括号`[`，在正则表达式中方括号是一个特殊字符，用于定义字符集（character class）。因此，我们需要使用反斜杠</code>来转义它，以匹配文本中的实际方括号。<ul><li><code>.*?</code>:然后是点号<code>*</code>和问号<code>?</code>的组合。 -点号<code>.</code>代表任何单个字符（除了换行符）。 -星号<code>*</code>表示重复前面的字符零次或多次。 -问号<code>?</code>在这里是一个非贪婪（non-greedy）限定符，它告诉正则表达式引擎匹配尽可能少的字符，直到遇到下一个模式。</li><li><code>\]``: 这部分是查找与前面的左方括号相对应的右方括号</code>]`，同样地，由于方括号在正则表达式中有特殊含义，我们使用反斜杠``进行转义。</li></ul></li><li><code>\(</code>和<code>\)</code>:这两个是用来匹配实际的左右圆括号<code>(</code>和<code>)</code>，这两个圆括号用来括起Markdown中图片链接的URL路径，因为在正则表达式中圆括号具有特殊的分组功能，所以需要使用反斜杠<code>\</code>来转义它们。</li><li><code>(.*?)</code>: 这是一个捕获组（capturing group）：<ul><li>括号<code>()</code>定义了一个捕获组，用来捕获和存储匹配的数据以便将来引用。</li><li>点号<code>.*</code>同样表示匹配任何字符零次或多次。</li><li>问号<code>?</code>使得匹配变得非贪婪，即匹配尽量少的字符。</li></ul></li></ul><p>综上所述，正则表达式<code>r'!\[.*?\]\((.*?)\)'</code>整体查找的是一个标记了图片图像且不包含换行符的Markdown链接，它匹配以<code>![]</code>开始，紧跟一个括号内含任意字符（非贪婪匹配）的字符串。括号内的匹配部分（即图片的URL路径）被捕获以便之后使用。</p><h3id="每次上传博客md文件和图像需要g还是d">每次上传博客md文件和图像需要g还是d</h3><p>当你上传博客的Markdown文件和图像后，通常你需要先执行<code>hexo generate</code>（或其简写<code>hexo g</code>）来生成最新的静态文件，然后执行<code>hexo deploy</code>（或其简写<code>hexo d</code>）将这些静态文件部署到服务器上。</p><p>具体步骤通常是这样的：</p><ol type="1"><li>更新Markdown文件和图像到你的博客项目目录中。</li><li>在命令行中运行<code>hexo g</code>来生成网站的静态内容。这个过程会将你的Markdown和图像文件转换为网页文件，并将它们存放在<code>public</code>目录下。</li><li>完成网站的静态内容生成后，运行<code>hexo d</code>来部署这些内容到指定的服务器上，例如GitHubPages。</li></ol><p>如果你已经配置了Hexo的一键部署功能，在运行<code>hexo d</code>时，Hexo会自动将<code>public</code>目录中的内容推送到远程仓库，网站即会相应更新。</p><p>请记住，每次对博客内容做出更改，比如添加或编辑文章，或者更改图像等，你都需要运行这两个命令以确保你的更改被应用并展示在你的线上博客中。</p><h3id="error-cannot-spawn-.githookspre-commit-no-such-file-or-directory-everything-up-to-date-branch-master-set-up-to-track-gitgithub.comltspaceltspace.github.io.gitmaster.">error:cannot spawn .git/hooks/pre-commit: No such file or directory Everythingup-to-date branch 'master' set up to track'git@github.com:ltspace/ltspace.github.io.git/master'.</h3><p>这个错误信息表明Git在尝试执行<code>pre-commit</code>钩子时没有找到这个文件，这可能是由于以下几个原因造成的：</p><ol type="1"><li><code>pre-commit</code>钩子文件可能没有正确放置在<code>.git/hooks</code>目录中。</li><li><code>pre-commit</code>文件可能没有执行权限（在Windows环境下通常不需要设置执行权限，但有时可能受特定的环境配置影响）。</li><li>如果你使用Windows，并且手动创建了<code>pre-commit</code>文件，可能会不知不觉地给文件加上了默认的<code>.txt</code>等扩展名。</li></ol><p>针对以上情况，请检查以下几点：</p><ul><li>确认<code>pre-commit</code>文件位于正确的目录：<code>.git/hooks</code>。</li><li>确认文件名确实是<code>pre-commit</code>，没有隐藏的扩展名。在Windows文件资源管理器中查看文件名时，要确保设置允许显示已知文件类型的扩展名。</li><li>如果是通过文本编辑器创建的钩子脚本，确保在保存时选择“所有文件”类型，以避免自动添加扩展名。</li><li>尝试直接在命令行中执行<code>pre-commit</code>钩子脚本来看是否能正确运行。如果不能，可能是脚本本身存在问题，或者你的环境中没有安装Python或者脚本的执行路径不对（在脚本的开头<code>#!/bin/sh</code>可能需要指向正确的shell路径，这在Windows中通常不是必须的，但是依赖于你的环境配置）。</li></ul><p>如果上述都没问题，你可以尝试删除<code>pre-commit</code>钩子并重新创建它。如果错误仍然存在，那么需要对你的Git安装和配置环境做更深入的查看。在极端情况下，你可能需要重新安装Git或者调查是否有其它系统级的问题影响到了Git钩子的执行。</p><h3id="git仓库里.git的名字是.deploy_git">git仓库里.git的名字是.deploy_git</h3><p>如果你的 <code>.git</code> 文件夹的名字被改为了<code>.deploy_git</code>，那很有可能是使用了Hexo的部署机制，特别是当采用<code>hexo-deployer-git</code>插件时，它会创建一个<code>.deploy_git</code>目录用来作为Git部署仓库。这个目录用于存储生成的静态文件，并将其推送到远程仓库，比如GitHubPages。</p><p><code>.deploy_git</code>目录与你本地编辑文档的Git仓库（通常用<code>.git</code>目录来管理）是分开的。Git钩子需要放在实际的Git仓库的<code>.git/hooks</code>目录中。如果你将钩子脚本放到了<code>.deploy_git</code>目录，那么它不会在你的常规Git操作中被触发。</p><p>解决方法如下：</p><ol type="1"><li>确认你的本地仓库（包含你编辑的源文件）的<code>.git</code>目录。它应该是你项目根目录的<code>.git</code>文件夹，而不是Hexo生成的<code>.deploy_git</code>文件夹。</li><li>将你的<code>pre-commit</code>钩子脚本放入你项目根目录下的<code>.git/hooks</code>目录中。</li><li>确保<code>pre-commit</code>钩子脚本具有正确的内容，并且能够在你尝试提交到你的源代码仓库时被触发。</li></ol><p>如果你尝试修改你的源代码并提交（例如使用<code>git commit</code>命令），那么钩子脚本应该在你项目的<code>.git/hooks</code>目录中被触发。如果你仅仅使用<code>hexo deploy</code>命令部署网站，它是不会触发这个钩子的，因为这通常会直接向<code>.deploy_git</code>仓库提交。</p><h3id="depoly_git里还有一个.git文件夹">.depoly_git里还有一个.git文件夹</h3><p>在Hexo项目中，<code>.deploy_git</code>文件夹是用于存储Hexo生成的静态文件以便部署到远程服务器的地方。当你使用<code>hexo-deployer-git</code>插件进行部署时，Hexo会将<code>public</code>目录中生成的静态文件复制到<code>.deploy_git</code>目录，并在该目录初始化一个新的Git仓库用于部署。</p><p><code>.deploy_git</code>目录中的<code>.git</code>文件夹是这个用于部署的Git仓库的元数据存储位置，其中包含了版本控制的相关信息，如分支、提交历史、配置等。实际上，<code>.deploy_git</code>目录本身就像是一个完整的Git仓库。</p><p>当你执行<code>hexo deploy</code>命令时，以下步骤会被触发：</p><ol type="1"><li>Hexo调用<code>hexo generate</code>生成静态文件。</li><li>生成的静态文件被复制到<code>.deploy_git</code>目录。</li><li>在<code>.deploy_git</code>目录执行Git命令，将变更添加(commit)到本地仓库，并将其推送(push)到远程服务器（如GitHubPages或其他托管服务）。</li></ol><p><code>.git</code>文件夹在<code>.deploy_git</code>目录中的作用是管理这一部署过程中所有的Git操作和历史记录。</p><p>如果你在尝试运行Git钩子时遇到问题，请确保钩子被放置于你的源代码仓库的<code>.git/hooks</code>目录中，而不是<code>.deploy_git</code>目录或其内的<code>.git</code>目录中。这样，当你操作源代码仓库时（比如执行<code>git commit</code>），钩子才会被正确触发。</p><figure><img src="/images/image-20240309112717007.png"alt="image-20240309112717007" /><figcaption aria-hidden="true">image-20240309112717007</figcaption></figure><h3 id="额外再执行一遍git-commit的命令只执行hexo-g--d">额外再执行一遍gitcommit的命令，只执行hexo g -d</h3><p>如果要在执行 <code>hexo g -d</code> 的同时确保<code>pre-commit</code> 钩子被触发，你需要理解 <code>git commit</code>和 <code>hexo g -d</code> 在工作流程上的不同：</p><ul><li><code>git commit</code> 是Git版本控制系统的命令，当你执行它时会触发<code>.git/hooks</code> 中的钩子脚本。</li><li><code>hexo g -d</code>是Hexo的命令，用于生成静态网站内容并将其部署到配置的服务器上，不会直接触发Git的<code>pre-commit</code> 钩子。</li></ul><figure><img src="/images/image-20240309114430069.png"alt="image-20240309114430069" /><figcaption aria-hidden="true">image-20240309114430069</figcaption></figure><figure><img src="/images/image-20240309114453958.png"alt="image-20240309114453958" /><figcaption aria-hidden="true">image-20240309114453958</figcaption></figure><h3id="把钩子放到.deploy_git的.git里hexo-g--d-直接执行钩子">把钩子放到.deploy_git的.git里，hexog -d 直接执行钩子</h3><p>理论上，你可以将钩子脚本放在 <code>.deploy_git/.git/hooks</code>里面。因为这个 <code>.git</code>目录确实是一个git仓库，所以它应该能认可钩子脚本。但这样做有一些需要考虑的地方：</p><ol type="1"><li><strong>Hexo 工作流程</strong>：通常，<code>.deploy_git</code>仓库用于存放生成的静态文件，而不是源文件。如果你的钩子脚本主要是为了处理源文件（比如修改Markdown文件中的图片路径），那么它应该在源文件的git 仓库中被触发执行。</li><li><strong>自动化程度</strong>：把钩子放在 <code>.deploy_git</code>中确实可以在执行 <code>hexo deploy</code>时自动处理静态文件。但如果你的钩子脚本是为了更新本地的源Markdown文件的图片路径，那么这个静态文件是由源文件生成的，所以应该在更新源文件后、生成静态文件之前就处理好。</li><li><strong>维护性</strong>：<code>.deploy_git</code>目录通常不会提交到远程源码仓库，因为它的内容会在你运行<code>hexo clean</code>命令或者重新生成网站时被删除或覆盖。这意味着，如果你将钩子脚本放在<code>.deploy_git/.git/hooks</code> 中，当 <code>.deploy_git</code>目录被删除或重新生成时，你可能会丢失这个钩子脚本。</li></ol><p>总结来说，虽然理论上可以将钩子放在<code>.deploy_git/.git/hooks</code> 中使其在执行 <code>hexo g -d</code>时自动执行，但这样做并不是实践中常见的或推荐的工作流程。通常，我们会在源码仓库中处理这些任务，以确保源码的版本控制和钩子脚本可以一起正常工作。如果你确实需要自动化此过程，可能还是需要一个在源码阶段就能够触发的自定义的脚本或命令集。</p><h3id="以下是将图片移动和替换绝对路径为相对路径的功能合并到一个脚本中的代码">以下是将图片移动和替换绝对路径为相对路径的功能合并到一个脚本中的代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> shutil<br><br># 设置目标目录<br>target_directory = <span class="hljs-string">&#x27;E:\\BLOG\\source\\images&#x27;</span><br><br># 配置你的Markdown文件的路径<br>markdown_directory = <span class="hljs-string">&#x27;E:\\BLOG\\source\\_posts&#x27;</span><br># 配置存放图片的文件夹名称，相对于markdown_directory<br>images_directory = <span class="hljs-string">&#x27;images&#x27;</span><br><br><br># 替换绝对路径为相对路径的函数<br>def <span class="hljs-built_in">replace_image_path</span>(file_path, image_dir):<br>    # 建立一个正则表达式模式匹配Markdown图片链接<br>    regex = r<span class="hljs-number">&#x27;</span>!\[.*?\]\((.*?)\)&#x27;<br><br>    # 读取Markdown文件内容<br>    with <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as file:<br>        content = file.<span class="hljs-built_in">read</span>()<br><br>    # 使用正则表达式匹配并替换路径<br>    new_content = content<br>    matches = re.<span class="hljs-built_in">findall</span>(regex, content)<br>    <span class="hljs-keyword">for</span> match in matches:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> match.<span class="hljs-built_in">startswith</span>(<span class="hljs-string">&#x27;http&#x27;</span>):  # 只替换本地文件路径<br>            new_image_path = os.path.<span class="hljs-built_in">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>, image_dir, os.path.<span class="hljs-built_in">basename</span>(match)).<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)<br>            new_content = new_content.<span class="hljs-built_in">replace</span>(match, new_image_path)<br><br>    # 写回新的内容到文件<br>    with <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as file:<br>        file.<span class="hljs-built_in">write</span>(new_content)<br><br><br># 写一个函数来处理文件的移动，并替换Markdown文件中图片的引用<br>def <span class="hljs-built_in">process_markdown_files</span>(md_directory, target_dir):<br>    <span class="hljs-keyword">for</span> root, dirs, files in os.<span class="hljs-built_in">walk</span>(md_directory):<br>        <span class="hljs-keyword">for</span> file in files:<br>            <span class="hljs-keyword">if</span> file.<span class="hljs-built_in">lower</span>().<span class="hljs-built_in">endswith</span>(<span class="hljs-string">&#x27;.md&#x27;</span>):<br>                full_path = os.path.<span class="hljs-built_in">join</span>(root, file)<br>                <span class="hljs-built_in">move_images</span>(full_path, target_dir)<br>                <span class="hljs-built_in">replace_image_path</span>(full_path, images_directory)<br><br><br># 处理文件移动的函数<br>def <span class="hljs-built_in">move_images</span>(md_file_path, target_dir):<br>    with <span class="hljs-built_in">open</span>(md_file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as file:<br>        content = file.<span class="hljs-built_in">read</span>()<br><br>    # 正则表达式查找所有 Markdown 图片链接<br>    image_paths = re.<span class="hljs-built_in">findall</span>(r<span class="hljs-number">&#x27;</span>!\[.*?\]\((.*?)\)<span class="hljs-string">&#x27;, content)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    if not image_paths:</span><br><span class="hljs-string">        print(f&quot;No images found in &#123;md_file_path&#125;&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    for image_path in image_paths:</span><br><span class="hljs-string">        # 检查是否是绝对路径</span><br><span class="hljs-string">        if os.path.isabs(image_path):</span><br><span class="hljs-string">            # 获取图片名和目标路径</span><br><span class="hljs-string">            image_name = os.path.basename(image_path)</span><br><span class="hljs-string">            destination = os.path.join(target_dir, image_name)</span><br><span class="hljs-string"></span><br><span class="hljs-string">            # 显示正在处理的图片</span><br><span class="hljs-string">            print(f&quot;Processing image: &#123;image_name&#125;&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">            # 如果目标路径下没有这个文件再进行移动</span><br><span class="hljs-string">            if not os.path.exists(destination):</span><br><span class="hljs-string">                # 尝试移动图片，如果原始图片路径不存在则会抛出异常</span><br><span class="hljs-string">                try:</span><br><span class="hljs-string">                    shutil.move(image_path, destination)</span><br><span class="hljs-string">                    print(f&#x27;</span>Moved image &#123;image_name&#125; to &#123;target_dir&#125;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">                except FileNotFoundError:</span><br><span class="hljs-string">                    print(f&#x27;</span>Image <span class="hljs-keyword">not</span> found at &#123;image_path&#125;, skipped moving<span class="hljs-number">&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(f<span class="hljs-number">&#x27;</span>Image &#123;image_name&#125; already exists in target directory; no action taken<span class="hljs-number">&#x27;</span>)<br><br><br># 开始处理Markdown文件和图片<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;Processing Markdown files and images in &#123;markdown_directory&#125;&quot;</span>)<br><span class="hljs-built_in">process_markdown_files</span>(markdown_directory, target_directory)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All Markdown file image paths and images have been processed.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>24考研的具体经验反思</title>
    <link href="/2024/03/02/24%E8%80%83%E7%A0%94%E7%9A%84%E5%85%B7%E4%BD%93%E7%BB%8F%E9%AA%8C%E5%8F%8D%E6%80%9D/"/>
    <url>/2024/03/02/24%E8%80%83%E7%A0%94%E7%9A%84%E5%85%B7%E4%BD%93%E7%BB%8F%E9%AA%8C%E5%8F%8D%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="考研的具体经验反思">24考研的具体经验反思</h1><p>（未完成）</p><hr /><p>我觉得github上有个仓库极其的好，叫《考研：有手就行》</p><p>这位大哥是二战的，22年分数一般，但23年上岸上交计算机，水平真不是一般人，</p><blockquote><ul><li>第一次的初试分数是79 + 72 + 93 + 86 = 330（11408），未进复试。</li><li>第二次的初试分数是80 + 75 + 137 + 122 =414（11408），复试分数是180分（总分200）。</li></ul></blockquote><p>我今年是64 + 79 + 97 + 100 = 340（11408），</p><p>鉴于我这北京和他那上海都挺旱的，只能说我俩一战水平差不多。</p><hr /><p>他给出了无比具体且可量化的方法，</p><p>趁现在还早，你如果严格按照他的方式来，是真的可以考个巨无敌高的分数。</p><p>（额也说不定，万一明年题更难了，超纲题更多了，这种情况看谁都没用）</p><p>我当时看到的时候已经晚了。</p><hr /><p>记得这个库还是后台一粉丝介绍给我的，说我和那个大佬理念很相似，</p><p>经过这一切之后再想起这个评价，真是太讽刺了。</p><hr /><p>我其实不想由果索因，因为会额外否定很多东西。</p><p>但没有结果的时候，又会不自觉美化自己的行为。</p><hr /><p>个人情况：</p><p>山东高考，末流985，计算机本科，一战北京11408，笨拙的努力型选手。</p><hr /><h2 id="政治">1 政治</h2><p>客观39，主观25，总分64.</p><p>简单来说，还是别花时间学政治了。</p><hr /><h3 id="选择">1.1 选择</h3><p>我后期买了那个喵刷政治的微信小程序，也买了苍盾政治的小程序，</p><p>比较之后用喵刷，UI简洁舒适，能归类错题生成pdf打印纸质版，</p><p>最重要的是能长按排除选项，对于选择题来说很有用。</p><p>对了，我提到的都不是广，没有人会找我这种没粉丝的公众号投广告。</p><hr /><p>然后用喵刷刷了几乎所有的模拟卷的选择；肖八肖四选择题二刷三刷、纸质版刷完小程序刷；错题归档，打印纸质版继续二刷三刷。</p><p>背腿姐手册，背b站帕拉迪宇的一页纸，用政治带背下饭，</p><p>最后选择39，错仨单选，四多选。</p><p>挺烂，我记得今年出来之后很多人说政治选择简单。</p><hr /><p>政治选择方面应该很少人能超过我花费的时间。</p><p>你看，这可怜的投入产出比，（笑）。</p><p>不过我记得肖八刚出来的时候我第一套选择19分，大家平均也在一二十分左右，</p><p>该看的还是得看看，才能上40，</p><p>我意思就是该刷的刷，别刷多了。</p><p>十二月只刷肖八肖四吧各位，刷多了也没用。</p><p>反正大家水平都差不多之后，主要还是看运气。</p><hr /><p>平常互联网键政的各位，尤其是魔怔人，</p><p>我建议你们前期也不用买核心考案听徐涛的课了，很多概念你们都懂，</p><p>不懂的东西到十一二月的时候对着背诵手册细品一下也就明白了，很多都是你们平常唠的东西。</p><hr /><h3 id="大题">1.2 大题</h3><p>我这可怜的25分，我分析的是，</p><ul><li>京区主观狠压分</li><li>字体巨无敌烂</li><li>套张修齐模板抄材料少</li></ul><hr /><p>我现在挺后悔的，每天挂嘴边的就是京区把我害惨了，</p><p>放别的水区政英高二十分，调剂得多好调，</p><p>这就是当时不考虑退路的下场。</p><hr /><p>字体巨无敌烂这一点我也没想到，我没想到威海职业学院那几天那么冷，</p><p>前一天刚下完持续几周的雪，后一天就开始考试，化雪的同时考场还是没暖气的阶梯教室，</p><hr /><p>备考的时候要不还是找找适合你考场的温度吧，</p><p>像我，所有备考的时间为了不让身体状态影响我，都选择的是冬暖夏凉的图书馆，</p><p>导致我在20℃图书馆里模拟的政治字体间距排版等等一切，在零下的考场上全部失效。</p><hr /><p>买了四五十个暖宝宝，那两天全用完了，到处都贴，只能管前一小时，手还是冻僵握不住笔。</p><p>写的时候很难受，</p><p>我因为背的张修齐，每道题能写上的东西极其的多，我不想放过任何一个得分点，就把每一个答题空都写上了密密麻麻的蝇头小字，最后看我的答题卡，可以算是乌黑一片，</p><p>手冻僵了完全控制不了，同时肾上腺素作用，我边发抖边写字，这种情况下也没办法控制字体。</p><p>最后就是这个结果。</p><hr /><p>最后一点，</p><p>我觉得张修齐老师确实很好，直播点拨的答题思路经常让人恍然大悟，</p><p>娱乐性也强，懂得都懂，</p><p>十页纸也很好用，覆盖考研大题，减少了绝大部分背诵负担。</p><p>考水区的可以放心跟张修齐老师。</p><p>考旱区的话，我建议是肖八肖四也得看看，结合材料，自己组织语言和答分点，简洁清晰的卷面更重要。</p><hr /><p>还是那句话，你到十一二月再开政治完全不迟。</p><hr /><figure><img src="/images/image-20240302191735961.png"alt="image-20240302191735961" /><figcaption aria-hidden="true">image-20240302191735961</figcaption></figure><h2 id="英语">2.英语</h2><p>完型全对，阅读错仨，主观小作文6.5/10，大作文11/20，翻译7/10，只能说难评，京区就这样。</p><hr /><h3 id="客观">2.1 客观</h3><p>四六级裸考均分580，属于英语没那么好，但也不用额外补的水平。</p><p>单词没背完，太多了，红宝书那么一厚本我是真难绷，不背单词显示有六千多个？</p><p>我寻思着光单单在软件上按完就得花我一辈子。</p><hr /><p>后来只在不背单词上随便选了一个只有七八百的考研核心词的词书，</p><p>也没背完，最后剩了二百多个。</p><p>我的经验是还是得三人组队，找俩比较好的朋友，互相监督，不然我根本没时间打开软件。</p><p>当时主要背单词的时间都是在组队的那一个月背的，每天背十五分钟打卡，打完立马关了。</p><hr /><p>真题大概做了不到十套，</p><p>十月份的时候先做的10、11年的，当时完型动辄错11、12个，气笑了，就没再管，因为知道那段年份难。</p><p>后来十一月有空的时候做了几套近几年的选择，觉得阳间了不少，</p><p>完型稳定在两三个，阅读稳定在三四个，</p><p>当时实在是没时间，寻思着既然这水平能用了，就这样得了。</p><p>所以最后考试前那一个月也没做一两套英语，全吃老本。</p><hr /><p>最后证明运气还行，考场上的文章都能看懂，花二十分钟做完了客观题。</p><hr /><h3 id="主观">2.2 主观</h3><hr /><p>大作文用的红果研王晶婷的作文书，实在是很好用，</p><p>像拼图一样，可以选用不同水平的句子拼凑出属于自己的模板，</p><p>但主要还是靠当场发挥。</p><hr /><p>小作文搁十二月份背背那几个信件类型开头结尾的句式就行，</p><p>我感觉考研从我这届开始变得变化莫测了，试图考前压中题目是极其吃力不讨好的事儿，</p><p>中间的部分还不如当场发挥。</p><hr /><p>十一二月开始，大小作文分别模了两三次吧，平常就背背自己攒的模板。</p><hr /><p>翻译没啥说的，感觉无论翻译的再好在北京都会每道题扣0.5。</p><hr /><p>小作文写跑题了，</p><p>人外国人说要做一个ancientscientist的讲座，关于古代中国科学家的讲座，</p><p>按理说应该推荐中国古代的科学家，所以舍友问我写的谁的时候我汗流浃背，</p><p>我看成是面向研究中国古代文明的科学家做中文讲座，</p><p>写让他去bilibili学汉语，让他别担心，中国人都挺友善，你发音不准也不会嘲笑你，</p><p>跑题了还有6.5，可能把批试卷的研究生逗乐了。</p><hr /><p>大作文也挺逗，</p><p>各路老师考前预测，还是如同一成不变的往年，英一还是看图写话类作文，英语二还是图表类作文，</p><p>然后今年发下试卷来，我看了一眼大作文，</p><p>嘿，图片和图表都有，又给我气笑了。</p><p>图片好像是一座公园，游人自得其乐，图表是公园数量逐年上涨。</p><p>凭着仅有的对于图表趋势性描述的记忆简单写了几句。</p><p>后来就是赞颂Party好，government好，人民生活幸福感高，经济稳中向好。</p><p>不然还能说什么呢。</p><hr /><p>总之英语我几乎没花时间，对我来说是性价比爆棚的学科，</p><p>这大概就是那些大佬学数学的感受。</p><hr /><figure><img src="/images/image-20240302202850572.png"alt="image-20240302202850572" /><figcaption aria-hidden="true">image-20240302202850572</figcaption></figure><hr /><h2 id="数学">3 数学</h2><p>这个部分，我都痛苦的不想回忆它。</p><figure><img src="/images/image-20240302212124335.png"alt="image-20240302212124335" /><figcaption aria-hidden="true">image-20240302212124335</figcaption></figure><hr /><p>选择错仨，填空错仨，30分就已经没了。</p><p>极其恐怖。</p><p>我最后还能考97，全靠大题判卷放水。</p><hr /><p>所以那个上交佬在数学篇的一开始就说，</p><blockquote><p>数学是一门方差极大的学科，这个方差既指考生之间的方差，又指考生（发挥）的方差。</p></blockquote><p>我觉得能考到145-150的人，最低也就140，这只是试卷的上限，不是他深厚积累的底线。</p><p>但是在120，110，100分数段的人，完全可以考到90。</p><hr /><p>太痛苦了，是想想就想死的程度。</p><p>如果我备考有100%的时间，</p><p>那么60%的时间都在学数学，</p><p>30%的时间学408四门课，</p><p>8%的时间学政治，</p><p>2%的时间学英语。</p><hr /><p>性价比低到了一个令人咋舌的程度，感觉我学一两个月和我学一年相比，分差也不会超过20。</p><hr /><p>基础和强化全程跟的张宇，</p><p>我觉得没必要一听别人说张宇的课门槛高就退缩，我这种大学高数60分的人都能正常听懂，门槛高又能高到哪儿去呢。</p><p>线代大后期又跟了b站的帕拉迪宇，小铜数学等一系列优秀up主，</p><p>反正他们互相认识也合作过视频，找到一个就可以顺藤摸瓜找到其他人。</p><p>概率论和无穷级数到大后期又跟了一遍方浩。</p><p>记得不要跟考研竞赛凯哥，具体原因自己去找。</p><hr /><p>邂逅遗憾知乎的经验贴害惨了我，让我觉得我也能上，建议看他经验贴之前撒泡尿照照自己。</p><p>rw现在每年炸成这样，有很大一部分原因就是他知乎的经验帖。</p><p>但是他经验帖写的确实好，他推荐的方浩概率论确实不错，</p><p>他自己办的课挺贵的，小班八百多大班四千多，我没听过不做评价。</p><hr /><p>就是方浩的那个书和他的课程不配套真的很烦，我学概率论的时候一大部分时间都在抄他的课上例题，因为题确实有用，</p><p>尤其是张宇的课和他的书配套的极其丝滑，再听方浩的课感觉跟吔了史一样。</p><p>建议别买方浩的书，直接买风中易小生做的方浩做题本自己打印，我也是后来才发现风中易小生的做题本都给整理好了。</p><hr /><p>我虽然考得烂，但张宇老师确实好，教材做得很全，</p><p>上课生动形象，体谅学生，到现在我还记得他讲的狮子王的故事，不过当时听的时候我倍速过去了。</p><p>据说今年数学这样之后各大经验贴都主推张宇老师了，因为张宇老师的全程班基础性好的同时扩展度最高。</p><hr /><p>只能说从此往后，如果卷考研的人继续增多，数学的难度和扩展性也会越来越大，越来越起到选拔人才的作用，</p><p>今年就是最好的例子，狠狠给了我当头一棒，</p><p>没有两把刷子的人好好掂量掂量自己。</p><hr /><p>武老师我是真听不进去，语调太平，感觉像是大学里读ppt的老师，但是有很多跟武老师的人分数也很高，所以这两大派系的选择主要还是看自己。</p><hr /><p>周围基础不好的有跟周洋鑫的，</p><p>我本来不太了解这个人，就是最后的时候做了他出的三套卷，</p><p>猛然觉得，嗬这题出得好像真题，好有水平，然后一看发现很多都是真题改编的。</p><p>感觉应该也是个好老师。</p><hr /><p>我现在回忆，基础阶段和强化阶段在我脑海里是空白的，</p><p>我觉得这有可能就是我数学考成这个样子的原因。</p><p>像是盘古还未开天辟地时的混沌。</p><hr /><h2 id="section">4.408</h2><figure><img src="/images/image-20240302230426611.png"alt="image-20240302230426611" /><figcaption aria-hidden="true">image-20240302230426611</figcaption></figure><hr /><p>最后来个总结吧，再低也是我辛辛苦苦考出来的分</p><p>这个系统我这辈子估计也不会再进了。</p><p>（未写完，图之后贴）</p><figure><img src="/images/image-20240302230509125.png"alt="image-20240302230509125" /><figcaption aria-hidden="true">image-20240302230509125</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>重新搞了博客</title>
    <link href="/2024/02/29/%E9%87%8D%E6%96%B0%E6%90%9E%E4%BA%86%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/02/29/%E9%87%8D%E6%96%B0%E6%90%9E%E4%BA%86%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>重新搞了博客，</p><p>21年刚开始整博客的时候，把博客放在了我自己的云服务器里，觉得既然买了就不用白不用，顺便练练运维啥的。</p><p>后来那个服务器承担了我很多的学习任务和尝试，所以经常遇到依赖地狱，</p><p>一旦十几个小时卡在某个依赖上毫无进展，我就直接气得重装整个服务器，</p><p>又懒得在外边套docker，所以连带着博客也得重装，我的评价是活该，</p><p>重装了几次之后就气坏了，懒得搞了，荒废了两年。</p><hr /><p>最终决定将博客作为一个lifelong的项目维持，为了省钱省力气挂在了github上，再重定向到我原来的域名，一举两得。</p><hr /><p>以前是把公众号的内容都搬过来，但是现在没那精力了，</p><p>因为微信公众号不支持md格式，导致我每次写完md之后还要贴到公众号上去精修一下，后来就演变成md只写草稿，再粘贴到公众号的编辑框写详细。</p><p>所以要么写个脚本，发哪个平台就全自动化移植到另一个平台，要么就两个平台单独更新吧，这边写点儿那边不让写的。</p><p>有空的时候我还是想完全自己写博客的前后端，现在用hexo主要是没时间，至于什么时候有时间，我觉得得等到上研究生之后，或者工作之后，或者退休之后了。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>24考研的感受</title>
    <link href="/2023/12/24/24/"/>
    <url>/2023/12/24/24/</url>
    
    <content type="html"><![CDATA[<p>首发于微信公众号</p><p><ahref="https://mp.weixin.qq.com/s/Z36m4_W5Q_5h-bg2_d9yOA">我对于24考研的感受</a></p><p><br></p><h2 id="section">1</h2><p><br></p><p>无数次跟朋友调笑，说，考不上就二战，有什么大不了。</p><p>现在发现自己没办法二战。</p><p>因为没了半条命。</p><p>而且我是认真的。</p><p><br></p><hr /><p><br></p><p>这个月的很多时刻，我都在反复的想一个很浅显的道理，</p><p>就是为什么令人印象深刻的故事总是发生在各种大事中，过程里总是含有人的各种极端的情感，</p><p>而普通的生活就没太有观赏性。</p><p><br></p><hr /><p><br></p><p>为什么想这些，</p><p>因为每天都在痛苦里度过。</p><p>如果让我用一个词概括一下考研感受的话，我会在“痛苦“和”想死“之间选择。</p><p><br></p><hr /><p><br></p><p>我每天都会想哭很多次，</p><p>有时候能直接哭出来，让自己鼻腔一酸，眼泪就可以迅速往下掉一滩，</p><p>摘了眼镜，拿张卫生纸捂住下半张脸接住泪，就可以在沉默的哭着解压的同时继续背书看题。</p><p>剩下大部分时间，仍然痛苦的要死，想哭一下解解压，但尝试的时候一滴泪都流不出来，像枯井睁着黑漆漆的眼望天。然后乐一乐，自嘲一下自己连哭都哭不出来了，继续怀着想死的心背书看题。</p><p>每当这些时候就会想到这个道理，会觉得自己是某种舞台剧里的人物，因为感觉自己的精神状态和痛苦程度已经不属于正常人能经历的范畴了。</p><p><br></p><hr /><h2 id="section-1">2</h2><hr /><p><br></p><p>先谈痛苦的原因，</p><p>我考的是北京的数学一、英语一、统考408，</p><p>在整个考研领域算得上是顶尖体量、顶尖难度，考的也是顶尖学校。</p><p>我不后悔，因为如果我报了其他学校考出来分数超了这个学校的分数线，我会后悔一辈子，</p><p>相比之下，考不到这个学校的分数线被刷反而不会让我后悔，只会让我承认技不如人。</p><p><br></p><hr /><p><br></p><p>再加上我脑子很不好使。</p><p>我有多笨？举个小例子，我反复做了看了不知道多少遍往年真题，做了四五十套数学模拟，然而直到倒数第十天的时候，我才突然开窍，明白了10年真题的那道二次型为什么那么做，顺带才明白了一串儿类似的模拟题。</p><p>而且我明白的还是一个浅显的知识点。</p><p>每次这种突然开窍之后，我也哭，</p><p>不是喜悦的哭，是反应过来我突然开窍的东西到底有多简单的时候，会立马想到所有那些比我聪明的人早就花几秒的时间明白了这些知识点，而我要在桌前苦坐无数个斗转星移日日夜夜，用一次次的努力理解等待那个可能永远不会到来的质变。</p><p><br></p><hr /><p><br></p><p>然后我在12月18号的手机里留下了这句话：</p><p>“我不配留下后代。不然还让他和我一样这么蠢吗，还让他和我一样天天这么痛苦吗。”</p><p><br></p><hr /><p><br></p><p>再谈痛苦的内容。</p><p>我以前总是在所有事情上怪自己不努力，怪自己不自律。</p><p>因为我觉得我又菜又胖又丑，但我从未改变成功过。</p><p>所以我复盘我这辈子的时候，总是发现我没有任何一次竭尽全力过，</p><p>总是觉得我没有任何让我自己满意的事情。</p><p><br></p><p><br></p><p><br></p><p>现在有了。</p><p>无论最后结果怎么样，它都是。</p><p><br></p><p>因为我某一天发现，自从某个已经久远到我已经想不起来的时间点开始，我痛苦的内容就已经不是自己不努力了，而是自己天赋的上限、是这些受的苦、是这所有一切的最终意义。</p><p>我尽最大努力交付了。</p><p><br></p><p><br><br></p><p>十月的时候，我看到了努力的上限；十一月的时候，我开始想一些哲学的终极问题；十二月的时候，每天笑着哭，哭着笑，我觉得我变成了精神病。</p><p>现在考完的第一天，一小时前午睡做的梦还是昨天在数学考场上的心如死灰，做梦还是那用尽所有方法都解不出来的题，做梦还是已经冻僵了却还是一直在出冷汗的右手，做梦还是那死寂的氛围，如同一种无尽的阴影笼住我的人生。如果可以，我这辈子再也不想做数学了。之前哭是鼻酸，现在是喉咙深处酸，苦的让我想呕出我的内脏。</p><p>我已经竭尽全力，我在考前基本上完成了我应该做的所有任务，在冬日威海零下的考场上也发挥出了正常偏下的水平，我已经满足了，再来一年能改变的东西已经很少了。</p><p><br></p><p><br></p><p><br></p><p>这也是我最近不敢对答案的原因。</p><p>试想如果一个人做到了自己本不能做到的事情，如果一个人顶着巨大的压力满足了对自己来说超高的要求，却依然获得了预期外的坏结果，比如数学选择题错五个，而这是极其有可能发生的，我觉得我现在的精神状态会立马全线崩盘。</p><p>我已经足够努力，坚持到精神出问题，我已经很为自己自豪，但我还是希望那三个月无论寒暑雨雪每天都赶往图书馆的时刻，那些深夜无眠再挑灯火看文章的时刻，那些边哭边做题的时刻，那些闭馆时在暴风雪中深一脚浅一脚的时刻，都能有配得上它们的结果。</p><p><br></p><p><br></p><p><br></p><p>经历这一切后，我终于觉得，</p><p>我值得被爱了。</p><p>我要好好爱自己。</p><p><br></p><p><br></p><p><br></p><p><br></p><h2 id="section-2">3</h2><p><br></p><p><br></p><p>坂本龙一有首曲子，叫fullmoon，</p><p>用十一种语言叠加复述着一段话。</p><p>11月20号凌晨，我睡不着，坐在床下的黑暗里一直在听。</p><p><br></p><p><br></p><p>Because we don't know when we will die,</p><p>因为我们不知道死亡何时到达</p><p>we get to think of life as an inexhaustible well.</p><p>所以会把生命当成一座永不干枯的井</p><p>And yet everything happens only a certain number of times,</p><p>然而，所有事物都只出现一定的次数，</p><p>and a very small number really.</p><p>并且很少，真的</p><p>How many more times will you remember a certain afternoon of yourchildhood,</p><p>你会想起多少次童年中某个特定的下午，</p><p>some afternoon that's so deeply a part of your being that you can'teven conceive of your life without it?</p><p>某个深深成为你生命一部分的下午，如果没有它，你甚至无法想象自己的人生？</p><p>Perhaps four,or five times more?Perhaps not even that.</p><p>也许，四或五次吧？甚至可能没这么多。</p><p>How many more times will you watch the full moon rise?</p><p>你会看到满月升起几次呢?</p><p>Perhaps twenty.And yet it all seems limitless...</p><p>也许20次，然而这些都看似无穷﻿...</p><p><br></p><p><br></p><p><br></p><p>在最后的这几个月里，我每时每刻都清晰的知道，我所经历的这些事情看似无穷，实则有尽。</p><p>悲尽，识盈虚之有数。</p><p>我的感悟也会随着时间消逝，就像它们从未存在过。</p><p>考完过了一天，其实很多事情我就已经想不起来了，触发了自我保护机制。</p><p>心态也已经变成了完全不同的样子，所以现在的这些话只是在尽量还原模拟当时的心境。</p><p>考前的漫长日子里，我跟朋友们说，考完我要住在电影院，看小说、吃大餐、去运动、玩游戏、做美甲、剪掉我马上及腰的麻烦头发，玩一切我想玩的，尝试一切我没尝试过的。</p><p>现在下载回了所有娱乐软件，但连电影都不想看，小视频也不想刷，不想出门，什么都不想干，只想上床睡觉，桌下发呆。</p><p>抽离了所有东西，剩了一个空壳，需要慢慢用东西填回来。</p><p>像战场上回来的老兵，像刚坐牢出来的人。</p><p><br></p><p><br></p><p><br></p><p>像在一个舞台上缓缓退幕，</p><p>就到这里吧。</p><p>写这个东西的主要目的是，让来年的我万一落榜了还想二战的时候回来看看自己今年被折磨成了什么人不人鬼不鬼的样子，打消那个念头。</p><p>也没什么想说的了，可能四十八小时前的我还是能有满腹感慨往外倒的，但现在这个空壳是什么也说不出来了。</p><p><br></p><p><br><br></p><p>——留两首诗吧，我很喜欢的。</p><p><br></p><p>人生到处知何似，应似飞鸿踏雪泥。</p><p>泥上偶然留指爪，鸿飞那复计东西。</p><p>老僧已死成新塔，坏壁无由见旧题。</p><p>往日崎岖还记否，路长人困蹇驴嘶。</p><p><br></p><p>清夜无尘，月色如银。酒斟时、须满十分。</p><p>浮名浮利，虚苦劳神。叹隙中驹，石中火，梦中身。</p><p>虽抱文章，开口谁亲。且陶陶、乐尽天真。</p><p>几时归去，作个闲人。对一张琴，一壶酒，一溪云。</p><p><br></p><p><br></p>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>白嫖Google相册无限空间实操</title>
    <link href="/2023/08/24/%E7%99%BD%E5%AB%96Google%E7%9B%B8%E5%86%8C%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4%E5%AE%9E%E6%93%8D/"/>
    <url>/2023/08/24/%E7%99%BD%E5%AB%96Google%E7%9B%B8%E5%86%8C%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4%E5%AE%9E%E6%93%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="白嫖google相册无限空间实操">白嫖Google相册无限空间实操</h1><p><br></p><p>准备：已root的手机</p><p>（我用Mi13Ultra，MIUI14.0.16）</p><p><br></p><p><br></p><p>众所周知，在pixel一代手机上用谷歌相册可以原图无限量上传。</p><p><br></p><figure><img src="/images/image-20240310231058617.png"alt="image-20240310231058617" /><figcaption aria-hidden="true">image-20240310231058617</figcaption></figure><p><br></p><p><br></p><p>所以要想白嫖，要么去闲鱼上淘个旧版pixel，要么把自己的手机伪装成pixel一代。</p><p><br></p><p>旧pixel1闲鱼价格两三百，我寻思着都能再买个硬盘了，也不想再多出个累赘，还得来回倒腾，配置主力机的自动更新什么的，</p><p>只看基带的话，Pixel和PixelXL用的是骁龙821，Modem支持的最大上行速率是150Mbps，换算就是18MB/s，虽然看起来还行，但这么多年了，网卡估计也不太行了，肯定还是用新手机香。</p><p><br></p><p><br></p><p>https://github.com/ButaiKirin/Pixel-2016-Permissions/releases</p><p>前几年试过用这个magisk模块，失败了，当时把自己主力账号的存储空间搞得爆红，gmail邮件都进不来，</p><p>今天又试了试，感觉它的功能只是伪装了本地的google相册，让它显示一句“此Pixel可以免费备份不限量的照片和视频”，实际上是掩耳盗铃。</p><p><br></p><p><br></p><p><br></p><p>时隔一年又发现了个新的模块，</p><p>https://github.com/BaltiApps/Pixelify-Google-Photos</p><p>界面长这样</p><p><br></p><figure><img src="/images/image-20240310231211423.png"alt="image-20240310231211423" /><figcaption aria-hidden="true">image-20240310231211423</figcaption></figure><p>但是用这个发行版本的时候一直出问题，伪装也不成功。</p><p><br></p><p>所以去软件的群看了看，</p><p>尝试了一下这个人发的版本，</p><p>这个版本除了能成功以外，最大的区别就是可伪装的型号更多了</p><p><br></p><figure><img src="/images/image-20240310231224750.png"alt="image-20240310231224750" /><figcaption aria-hidden="true">image-20240310231224750</figcaption></figure><figure><img src="/images/image-20240310231238022.png"alt="image-20240310231238022" /><figcaption aria-hidden="true">image-20240310231238022</figcaption></figure><p>看应用签名，好像是这哥们自己搞的版本，发行组织就是他的博客域名，所以要想用的话，自己去群里或者这个博客里找。</p><figure><img src="/images/image-20240310231301486.png"alt="image-20240310231301486" /><figcaption aria-hidden="true">image-20240310231301486</figcaption></figure><p>这软件一开始装的时候会提示要在lsposed里打开模块后重启，实测也不用重启，lsposed里打开之后设置停止运行再打开就行。</p><p><br></p><p>谷歌相册：https://photos.google.com/</p><p>谷歌云盘：https://drive.google.com/</p><p><br></p><p>能够正常无限原画质备份的现象是：只有谷歌相册里能找到备份了的照片和视频，而谷歌云盘里不仅不占用存储空间，也看不见。</p><p><br></p><p>最后成功</p><figure><img src="/images/image-20240310231319864.png"alt="image-20240310231319864" /><figcaption aria-hidden="true">image-20240310231319864</figcaption></figure><figure><img src="/images/image-20240310231335363.png"alt="image-20240310231335363" /><figcaption aria-hidden="true">image-20240310231335363</figcaption></figure><p>（成功标志：网页端有照片的情况下显示0B）</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>折腾校园卡24小时后，我后悔了</title>
    <link href="/2023/07/29/%E6%8A%98%E8%85%BE%E6%A0%A1%E5%9B%AD%E5%8D%A124%E5%B0%8F%E6%97%B6%E5%90%8E%EF%BC%8C%E6%88%91%E5%90%8E%E6%82%94%E4%BA%86/"/>
    <url>/2023/07/29/%E6%8A%98%E8%85%BE%E6%A0%A1%E5%9B%AD%E5%8D%A124%E5%B0%8F%E6%97%B6%E5%90%8E%EF%BC%8C%E6%88%91%E5%90%8E%E6%82%94%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h1 id="折腾校园卡24小时后我后悔了">折腾校园卡24小时后，我后悔了</h1><p><br></p><p>我平常固定在图书馆某层中间的一个位置自习，旁边是一面巨大的窗子，采光好，还有窗台让我放书。</p><figure><img src="/images/image-20240310232415490.png"alt="image-20240310232415490" /><figcaption aria-hidden="true">image-20240310232415490</figcaption></figure><p>某天正午，我觉得很热，打开了我那片区域图书馆的空调，一个女生接着走过去关了。</p><p>好的，既然不让我开，那我搬去一直开着空调的地方。</p><p>但是开着空调的地方采光又不好，来回搬书又太麻烦。</p><p>于是我想，能不能预约两个座位，这样我就不用来回搬了，热的时候去开空调那里，暗的时候去采光好那里。</p><p><br></p><hr /><p><br></p><p>想用两个座位，就需要另外一个人的学生卡。</p><p><br></p><p>有个朋友，现在不在学校，未来一年也不会进图书馆，所以用他的学生卡就是最好的选择。</p><p>征求他的同意之后，我们开始讨论如何让我在没有卡的情况下使用他的卡进行预约。</p><p>他的卡留在了宿舍，但恰巧一年多前他买了个读卡器，恰巧当时他破解卡之后把dump文件（卡里边的内容）截图发给了我，截图里恰巧有我所需要的全部信息。</p><p>恰巧我当时也很好奇，借用了他的读卡器，自己也暴力破解了自己的校园卡，但早就忘了当时把破解出来的dump文件存到了哪里，有没有删，</p><p>于是我用everything正则搜*.dump，万幸，在回收站找到了当时校园卡和银行卡的dump文件，然后还原了回去。</p><p><br></p><figure><img src="/images/image-20240310232433541.png"alt="image-20240310232433541" /><figcaption aria-hidden="true">image-20240310232433541</figcaption></figure><p>另外，某校用的学生卡应该是IC卡中的一种，NXP MIFARE Classic1k，共分为12个扇区，</p><p><br></p><figure><img src="/images/image-20240310232444160.png"alt="image-20240310232444160" /><figcaption aria-hidden="true">image-20240310232444160</figcaption></figure><p>0-5这六个扇区是密钥加密过的，nfc读取只能读出它位于0扇区0块的卡号，因为在nfc第一次读取卡的实体门卡页面中显示卡号，但模拟的时候提示说：加密卡只能模拟卡号（厂商码能不能不确定），</p><p>用十六进制查看器可以看出，后边的12345里存放了学号与姓名和一些其他的东西。</p><p><br></p><figure><img src="/images/image-20240310232509156.png"alt="image-20240310232509156" /><figcaption aria-hidden="true">image-20240310232509156</figcaption></figure><p>但手机和手环的nfc依然可以预约图书馆，说明图书馆的读卡机只需要读到卡号，不需要加密卡的其他部分，所以我只需要用nfc模拟出他的卡号，当然，这是我后期才明白过来的。</p><p>通过补办新卡让旧卡报废来看，卡号这玩意儿也是唯一的，估计是补办的时候会把新卡号插到数据库里覆盖旧卡号，达到每人一卡的功能。</p><p><br></p><hr /><p><br></p><p>于是现在的总体情况是，我拥有我卡的dump文件，他卡的dump文件，还有一张我在用的校园卡，还有一张之前找不到的，补办之后又找到，所以现在报废了的卡，还有一部root了的手机，</p><p>其它包括读卡器写卡器空白卡什么的，统统没有。</p><p>最终目的是用手机模拟出他的卡。</p><p><br></p><p>于是开始尝试各个软件能不能用，分别有什么功能，这是一个漫长的过程，</p><p>最后选定了四个软件，通过他们功能的配合达成目的，分别是</p><p>NFC Card Emulator Pro (root)</p><p>NFC Reader Tool Pro</p><p>Mifare Classic Tool</p><p>NFC Tools Pro</p><p><br></p><figure><img src="/images/image-20240310232531502.png"alt="image-20240310232531502" /><figcaption aria-hidden="true">image-20240310232531502</figcaption></figure><figure><img src="/images/image-20240310232539840.png"alt="image-20240310232539840" /><figcaption aria-hidden="true">image-20240310232539840</figcaption></figure><p>MCT就是Mifare ClassicTool，它无法自己添加dump，只能用现场读入的标签信息保存后再进行写入或修改，我主要用来读卡后写卡。</p><p>首先，0-5扇区是加密了的，MCT的读取标签需要密钥，写卡也是，但我只有dump文件，没有密钥，</p><figure><img src="/images/image-20240310232553736.png"alt="image-20240310232553736" /><figcaption aria-hidden="true">image-20240310232553736</figcaption></figure><p><br></p><p>但有了dump文件就相当于拥有了解密后的卡，按理来说能够从dump里反推出它的密钥。</p><p>所以我找到了NFC Reader ToolPro，它可以自己写dump，然后通过dump文件自动生成密钥文件，</p><p>当然，写的过程比较痛苦，因为只能在它自己新建的dump文件上修改，改成自己需要的，所以要自己在手机上写那6个扇区的数字。</p><p>最后每个dump文件都生成了一个六行的密钥，再导入到MCT中，此时发现可以成功读卡了。</p><p><br></p><p>此时我的手机莫名其妙开始疯狂自动重启，我排除了过热原因，还有电池原因（半个月前刚换），剩下的有可能是电源键问题，因为最近电源键不太灵敏，还有可能是换电池的时候线装的糙了，电池的断触问题，或者主板问题。</p><p>反正无论是什么，都很吓人，于是我当天备份了一遍我的手机数据（后文会极其感谢自己此时备份了一下）。</p><p><br></p><p>有了密钥，我就可以用MCT读写我的卡，此时我尝试了两种情况，</p><p>第一就是格式化，实际操作后发现除了0扇区0块，其它都能格式化到出厂状态，也就是这样</p><figure><img src="/images/image-20240310232605791.png"alt="image-20240310232605791" /><figcaption aria-hidden="true">image-20240310232605791</figcaption></figure><p><br></p><p>之后我用这个卡去图书馆刷卡机上刷了一下，发现还是可以读取，说明图书馆真的只认卡号（或加上厂商码）。</p><figure><img src="/images/image-20240310232615875.png"alt="image-20240310232615875" /><figcaption aria-hidden="true">image-20240310232615875</figcaption></figure><figure><img src="/images/image-20240310232625800.png"alt="image-20240310232625800" /><figcaption aria-hidden="true">image-20240310232625800</figcaption></figure><p><br></p><p>第二就是将他的dump文件中除了卡号的部分写入到我的卡中，也就是一个卡里有我的卡号，和解密后他的学号姓名，</p><p>下午去食堂吃饭时刷了一下，发现没有反应，说明食堂消费的读卡机不仅需要卡号，还需要同时验证里边的加密信息。</p><p><br></p><figure><img src="/images/image-20240310232637850.png"alt="image-20240310232637850" /><figcaption aria-hidden="true">image-20240310232637850</figcaption></figure><p><br></p><figure><img src="/images/image-20240310232645467.png"alt="image-20240310232645467" /><figcaption aria-hidden="true">image-20240310232645467</figcaption></figure><p>后来我反应过来，</p><p>既然图书馆只需要卡号，我也有了他的卡号，</p><p>我的手机又是root了的，理论上说我对我的手机具有绝对掌控权，</p><p>所以按理说我可以通过直接修改nfc配置文件的方式，让nfc直接伪装为他的卡号。</p><p><br></p><p>但来回改配置文件肯定很麻烦，因为我不止要用他这一个卡，而且同时还需要修改卡的频率之类的，</p><p><br></p><figure><img src="/images/image-20240310232701127.png"alt="image-20240310232701127" /><figcaption aria-hidden="true">image-20240310232701127</figcaption></figure><p><br></p><p>所以我开始寻找，有没有能自动化的帮我做好这一切伪装的软件。</p><p><br></p><p>有是有，但看起来做的很好的NFCTools注册就需要49.9，其它的非开源软件大同小异，都是在让我还未确定他们的软件能不能正常工作时就要收我十几块钱，我这人比较抠搜，而且找不到破解版。</p><figure><img src="/images/image-20240310232710377.png"alt="image-20240310232710377" /><figcaption aria-hidden="true">image-20240310232710377</figcaption></figure><p><br><br></p><p>后来，我终于发现了一款NFC Card Emulator Pro(root)：NFC卡模拟，它有手动添加卡号再用nfc模拟的功能，当然，需要root权限，谷歌商店6美金，没钱，用的52pojie的版本。</p><p>但无论如何，它都提示我获取不到root权限，而且它并没有给magisk发出弹窗的请求，</p><figure><img src="/images/image-20240310232725353.png"alt="image-20240310232725353" /><figcaption aria-hidden="true">image-20240310232725353</figcaption></figure><p><br></p><p>但我看到，我的那些步数修改器和爱玩机工作箱之类的需要root权限的软件都是在正常运行的，magisk也正常，甚至把请求响应改成自动允许也不行，我百思不得其解，于是放弃。</p><figure><img src="/images/image-20240310232735014.png"alt="image-20240310232735014" /><figcaption aria-hidden="true">image-20240310232735014</figcaption></figure><p><br></p><p>我接着转向寻找开源软件，但它们都是最晚4年前，最早能追溯到7年前的仓库，对于现在的安卓11来说可能太过时了，于是在功能上都出现了一些严重的问题，还有的甚至没有发行版，需要我自己用AndroidStudio构建。</p><figure><img src="/images/image-20240310232744665.png"alt="image-20240310232744665" /><figcaption aria-hidden="true">image-20240310232744665</figcaption></figure><p><br></p><p>（后期get rootaccess后发现也不能用，且作者多年前看到有比他好的NFC卡模拟pro之后就不再维护了）</p><figure><img src="/images/image-20240310232752539.png"alt="image-20240310232752539" /><figcaption aria-hidden="true">image-20240310232752539</figcaption></figure><p><br></p><p>这时陷入了僵局，哪个方法都走不通。我就只能去继续学最原始的直接修改libnfc.conf的方法，</p><p>但是直接修改系统的文件，首先你得先找到它，这就需要一个能获取root权限的文件资源管理器，最终选定了MT管理器，真的很好用，但是它也无法获取root权限，我就开始怀疑是magisk的问题，</p><p>对于NFC卡模拟那个软件，我也还是不甘心，</p><p>此时我突然看到一个贴吧的帖子，一个人说，要主动给软件授权root的话，可以在爱玩机工具箱里找到应用管理里的唤醒root权限，</p><figure><img src="/images/image-20240310232804770.png"alt="image-20240310232804770" /><figcaption aria-hidden="true">image-20240310232804770</figcaption></figure><p><br></p><p>就这么寥寥几句，下边好像只有两个人说他的方法有用，但却解决了我的众多问题，</p><p>正好我也有爱玩机工具箱，上手一试，真的成功了，那两个无法自己获取root权限的软件也在magisk的超级用户栏里出现了对应的按钮。</p><figure><img src="/images/image-20240310232814804.png"alt="image-20240310232814804" /><figcaption aria-hidden="true">image-20240310232814804</figcaption></figure><p><br></p><p>我大喜过望，我以为现在万事俱备，东风已来，其实路途才刚刚过半。</p><p>在赋权之后，我颤抖的打开了NFC模拟器，输入他的卡号，</p><p>创建成功，yes！</p><p><br></p><p>但开始nfc模拟的时候，又出现了一个问题：</p><p>软件提示我的vendor分区无法读写。</p><figure><img src="/images/image-20240310232825585.png"alt="image-20240310232825585" /><figcaption aria-hidden="true">image-20240310232825585</figcaption></figure><p><br></p><p>也就是说，要读写的nfc配置文件放在vendor分区里，而那个分区我现在依然没有读写的权力。</p><p>于是我需要去找到，让vendor分区能被修改的方法。</p><p><br></p><figure><img src="/images/image-20240310232837432.png"alt="image-20240310232837432" /><figcaption aria-hidden="true">image-20240310232837432</figcaption></figure><p>（此时，刷入magisk卡模块这个方法失败）</p><p><br></p><figure><img src="/images/image-20240310232847093.png"alt="image-20240310232847093" /><figcaption aria-hidden="true">image-20240310232847093</figcaption></figure><p>我没想到，修改vendor分区是一个巨大的难题，网上几乎所有的方法在Android11之后都失效了，所以我按照时间搜索近一年内的解锁vendor教程，只找到了一个看起来可行，且详细教学的帖子，</p><p>出厂安卓11机型解锁system分区教程_安卓11解锁system分区</p><p>https://blog.csdn.net/oAiYinSiTan12/article/details/119655706</p><p>如文中所说，解锁system的原理就是去除vbmeta检验(简称AVB2.0检验)</p><p><br></p><p>整体的流程看起来复杂，其实——做起来更复杂，</p><p>总体流程是，将vendor分区提取出来，修改/vendor/etc/fstab.qcom，去除里边的vab选项，打包回去，再刷入手机，</p><p>每一步里都有大大小小的坑。</p><p>提取vendor这一步，我手机上有termux，在termux里安装ubuntu，ubuntu里装上DNA工具，DNA工具的gitee主页的readme文件因为“可能违规”无法显示（离谱），所以需要clone到本地才能查看，</p><figure><img src="/images/image-20240310232907609.png"alt="image-20240310232907609" /><figcaption aria-hidden="true">image-20240310232907609</figcaption></figure><p><br></p><p>接着，提取vendor分区的脚本，这里又有坑，就像这个视频教程下面第一个评论www.bilibili.com/video/BV1xV411n7Ys/</p><p>“fastboot --disable-verity --disable-verification flash vbmetavbmeta.img的缘故，并没有VAB分区，所以脚本里的vender_a/vender_b需要变更成vender，同理system亦是如此。最后fastbootd刷入vender.img也没有vender_a/vender_b，使用fastbootflash vender vender.img刷入即可。”</p><p>我之前也试着执行过fastboot --disable-verity --disable-verificationflash vbmeta vbmeta.img这条命令，和他的情况是一样的，</p><p>但后来我发现，mi10的手机架构好像本来就没有ab分区，所以需要把脚本里的vendor_a改成vendor，后边的fastbootd刷入vendor时也是一样。</p><figure><img src="/images/image-20240310232923392.png"alt="image-20240310232923392" /><figcaption aria-hidden="true">image-20240310232923392</figcaption></figure><p><br></p><p>下一步修改，要注意我们现在用的DNA分解出来的size.txt不在视频里的地方了，需要自己在那几个文件夹下找一找。</p><p>开始用DNA打包的时候，还要注意，视频里的08是合成img，我们现在clone到的版本改成了06是img，而且下面的命令提示也改变了，最后打包出来的名字也不是vendor_dna.img而是直接的vendor.img，放的目录也变了，也需要自己去找找。</p><figure><img src="/images/image-20240310232931612.png"alt="image-20240310232931612" /><figcaption aria-hidden="true">image-20240310232931612</figcaption></figure><p><br></p><p>打包之后就可以刷入了，没想到我在这儿出现了严重的岔子，手机变砖了。</p><figure><img src="/images/image-20240310232939313.png"alt="image-20240310232939313" /><figcaption aria-hidden="true">image-20240310232939313</figcaption></figure><p><br></p><p>由于刷入的时候一直提示：Not enough space to resizepartition，空间不足，于是我开始删其它的分区，但无论怎么删，还是一直提示空间不足，我渐渐开始急了，</p><p>最后直接fastboot -w，意味着把我所有的用户数据也抹除了，</p><figure><img src="/images/image-20240310232946373.png"alt="image-20240310232946373" /><figcaption aria-hidden="true">image-20240310232946373</figcaption></figure><p><br></p><figure><img src="/images/image-20240310232956621.png"alt="image-20240310232956621" /><figcaption aria-hidden="true">image-20240310232956621</figcaption></figure><p><br></p><p>此时终于能把vendor刷进去了。</p><figure><img src="/images/image-20240310233004801.png"alt="image-20240310233004801" /><figcaption aria-hidden="true">image-20240310233004801</figcaption></figure><p><br></p><p>但由于我在刷的过程中出了很多奇怪的问题，所以刷入之后重启时，开始自动无限重启。</p><figure><img src="/images/image-20240310233012266.png"alt="image-20240310233012266" /><figcaption aria-hidden="true">image-20240310233012266</figcaption></figure><p><br></p><p>后来我又把自己备份的原来的vendor刷了进去，但无力回天，还是在无限重启，所以我决定直接进recovery双清，然后线刷进系统。</p><figure><img src="/images/image-20240310233020510.png"alt="image-20240310233020510" /><figcaption aria-hidden="true">image-20240310233020510</figcaption></figure><p><br></p><p>后来，线刷出了问题，找了二十分钟问题之后，发现是我下错了线刷包型号，10pro下成了10...极其低级的错误，但也合理，当时接近一点，我的脑子已经不太转动了。</p><figure><img src="/images/image-20240310233031177.png"alt="image-20240310233031177" /><figcaption aria-hidden="true">image-20240310233031177</figcaption></figure><figure><img src="/images/image-20240310233038422.png"alt="image-20240310233038422" /><figcaption aria-hidden="true">image-20240310233038422</figcaption></figure><p><br></p><p>我又去下载了一个mi10pro对应的包，因为小米社区的链接下得很慢，当时已经一两点了，所以我去别的地方找了一个下的快的（也没快多少），结果解压之后才发现是卡刷包，意味着又下错了，又浪费了5G流量和半小时。</p><p>最后，我终于长了记性，去小米社区下了10pro线刷包，凌晨网很慢，边看古相思曲边等，等了一小时。</p><p>刷入的时候又出了幺蛾子，当时看古相思曲的播放窗口正好挡住了下边的这个选项，默认选项是全部删除并lock，我就直接开始刷入，当我发现的时候，已经刷入了一半了，</p><p>当时一瞬间汗毛直立，头皮发麻，要是刷入之后还重启不了，我还把BL锁又锁上了，那在未解BL锁的情况下想刷机可就难如登天了。</p><p>最后还好刷入之后成功开机了，但同时BL锁被锁上了。</p><figure><img src="/images/image-20240310233048251.png"alt="image-20240310233048251" /><figcaption aria-hidden="true">image-20240310233048251</figcaption></figure><p><br></p><p>但我还想再刷入一遍修改过的vendor试一试，所以又得打开BL锁，于是又要解锁，还好第一次解锁之后不需要再等168小时，我又开了BL锁，之后又刷入了一遍vendor，这次刷入成功了，手机不再无限重启了。</p><p><br></p><p>最初的目标，解锁vendor是为了让NFC模拟器获取修改vendor的权限，</p><p>经过这么一折腾，我的手机恢复到了出厂状态，用户数据也没了，但我在两天前备份了一遍手机，所以再导入。</p><p>重新装完一遍系统之后再模拟，发现又在报错，之前是vendor：read onlyfile，现在的报错变成了No space left ondevice，但这次，帮助手册中的刷入magisk卡模拟成功了。</p><figure><img src="/images/image-20240310233057214.png"alt="image-20240310233057214" /><figcaption aria-hidden="true">image-20240310233057214</figcaption></figure><p><br></p><p>最后，在凌晨的将近五点，我终于模拟成功了。</p><figure><img src="/images/image-20240310233107013.png"alt="image-20240310233107013" /><figcaption aria-hidden="true">image-20240310233107013</figcaption></figure><p><br></p><hr /><p>你以为是个热血沸腾的good ending？不是的。</p><figure><img src="/images/image-20240310233140642.png"alt="image-20240310233140642" /><figcaption aria-hidden="true">image-20240310233140642</figcaption></figure><figure><img src="/images/image-20240310233148562.png"alt="image-20240310233148562" /><figcaption aria-hidden="true">image-20240310233148562</figcaption></figure><figure><img src="/images/image-20240310233157987.png"alt="image-20240310233157987" /><figcaption aria-hidden="true">image-20240310233157987</figcaption></figure><figure><img src="/images/image-20240310233206027.png"alt="image-20240310233206027" /><figcaption aria-hidden="true">image-20240310233206027</figcaption></figure><figure><img src="/images/image-20240310233212312.png"alt="image-20240310233212312" /><figcaption aria-hidden="true">image-20240310233212312</figcaption></figure><p>凌晨模拟成功后，我以为没问题了，于是买了杯咖啡，想去校外取咖啡的时候顺便经过图书馆测验一下就走，接着回来写这篇文章。</p><p><br></p><p>但没想到它模拟出来的是随机数。</p><p>在图书馆二楼刷卡机前找了个凳子，调试了半小时，无果，</p><p>图书馆没开空调，热的要死，去拿咖啡，</p><p>在咖啡店里坐着，继续调试了半小时，无果。</p><p><br></p><p>最后受不了了，索性放弃。</p><hr /><p>我在一开始就知道，我碰到的这些所有的问题其实几乎都能通过简简单单的一个CUID白卡解决，</p><p>过程中，我也无数次想到，如果有个白卡我就不用绕这么大一个圈子了，</p><p>所以我当时就下单了读卡器，商家赠送ID，UID，CUID，7月31送到。</p><figure><img src="/images/image-20240310233222395.png"alt="image-20240310233222395" /><figcaption aria-hidden="true">image-20240310233222395</figcaption></figure><p><br></p><p>但我就是想看看，在送到前的这几天里，我不靠读卡器和空白卡，仅靠现有的资源能不能解决问题。</p><p>虽然我失败了，但结论其实是能，只是我现在已经不想再去探究到底哪里出了问题了。</p><p>但我还是后悔了，因为我耗费了整整两天的时间，如果我手边有个五块钱的白卡，dump写入—导入手机NFC—完成，所有的流程不会超过五分钟。</p><p>为什么过程里我一直不想放弃，因为每一步看起来都像是最后一步——获取了root权限应该就能模拟成功了——vendor重新挂载应该就能成功了——刷入之后应该就能成功了——变砖了，但线刷之后再刷入一遍应该就能成功了......</p><p>没想到它就像一个无限往下递归的栈，我困在沉没成本里，永远不知道自己下一步是不是弹出。</p><p>我不想在这结尾处上升到浪子回头、及时收手之类的话，没有意义，</p><p>因为我知道，即使我现在后悔浪费了时间，下一次面对类似情境时，我也依然会去全力探究，</p><p>只是很多事情没有预想中的结果罢了。</p>]]></content>
    
    
    <categories>
      
      <category>折腾</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>威联通Nas配置Zerotier自建Planet踩坑记录</title>
    <link href="/2023/01/31/%E5%A8%81%E8%81%94%E9%80%9ANas%E9%85%8D%E7%BD%AEZerotier%E8%87%AA%E5%BB%BAPlanet%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/01/31/%E5%A8%81%E8%81%94%E9%80%9ANas%E9%85%8D%E7%BD%AEZerotier%E8%87%AA%E5%BB%BAPlanet%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><br></p><p><br></p><h1id="威联通nas配置zerotier自建planet踩坑记录">威联通Nas配置Zerotier自建Planet踩坑记录</h1><p><br></p><p><br></p><h2 id="用到的东西">0.用到的东西：</h2><p>威联通*1，型号：TS-264C</p><p>腾讯云服务器*1</p><p>Mi10pro*1</p><p>Win11*1</p><p><br></p><h2 id="自建planet">1.自建Planet</h2><p><br></p><h3 id="倒腾一键脚本半天没成功">1.1倒腾一键脚本半天，没成功</h3><p>主要是看的这个教程：</p><p><ahref="https://zhuanlan.zhihu.com/p/544807922">构建Zerotier私有根服务器(Planet)，实现比MOON更稳定的内网穿透- 知乎 (zhihu.com)</a></p><p>系统用了ubuntu18，20，22的LTS版本，都没成功</p><p>除了腾讯的服务器，我还用我另外一个Ucloud的1核2G的试了试，也不行</p><p><br></p><figure><img src="/images/image-20240310224426282.png"alt="image-20240310224426282" /><figcaption aria-hidden="true">image-20240310224426282</figcaption></figure><p><br></p><p><br></p><p>中间安装时出现了一个报错，</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">In <span class="hljs-keyword">file</span> included <span class="hljs-keyword">from</span> ..<span class="hljs-regexp">/../</span>osdep/OSUtils.cpp:<span class="hljs-number">44</span>:<br>..<span class="hljs-regexp">/../</span>osdep<span class="hljs-regexp">/OSUtils.hpp:46:10: fatal error: nlohmann/</span>json.hpp: No such <span class="hljs-keyword">file</span> or directory<br>  <span class="hljs-number">46</span> | #<span class="hljs-keyword">include</span> &lt;nlohmann/json.hpp&gt;<br>    |         ^~~~~~~~~~~~~~~~~~~<br>compilation terminated.<br>In <span class="hljs-keyword">file</span> included <span class="hljs-keyword">from</span> mkworld.cpp:<span class="hljs-number">49</span>:<br>..<span class="hljs-regexp">/../</span>osdep<span class="hljs-regexp">/OSUtils.hpp:46:10: fatal error: nlohmann/</span>json.hpp: No such <span class="hljs-keyword">file</span> or directory<br>  <span class="hljs-number">46</span> | #<span class="hljs-keyword">include</span> &lt;nlohmann/json.hpp&gt;<br>    |         ^~~~~~~~~~~~~~~~~~~<br>compilation terminated.<br></code></pre></td></tr></table></figure><p>从网上找的解决办法是</p><p>sudo apt-get install nlohmann-json3-dev</p><p>不报错了，但还是不行</p><p>主要就是卡在这一步</p><figure><img src="/images/image-20240310224443196.png"alt="image-20240310224443196" /><figcaption aria-hidden="true">image-20240310224443196</figcaption></figure><p>我打开我的页面会显示：服务器未发送任何数据，并且在此之前我是检查过内部防火墙和云服务器控制台防火墙都打开了的。</p><p>所以这个方法在我坐在电脑前坐牢了五六个小时之后终于被pass掉</p><p><br></p><h3 id="用docker安装">1.2用docker安装</h3><p>我主要成功的方法是这个</p><p><ahref="https://post.smzdm.com/p/apxkx2m7/">放弃moon节点，直接搭建Zerotier根服务器<em>软件应用</em>什么值得买(smzdm.com)</a></p><p><br></p><p>结合着这个看</p><p><a href="https://zhuanlan.zhihu.com/p/573746661">Zerotier搭建私有根服务器及创建虚拟局域网完整教程 - 知乎 (zhihu.com)</a></p><figure><img src="/images/image-20240310224459360.png"alt="image-20240310224459360" /><figcaption aria-hidden="true">image-20240310224459360</figcaption></figure><p>只看到五以前的内容，因为感觉Nas不是正常的linux系统</p><p><br></p><h2 id="威联通nas安装zerotier">2.威联通Nas安装Zerotier</h2><p><br></p><p>看的这个教程</p><p><ahref="https://zhuanlan.zhihu.com/p/332733170">高速远程访问NAS——用Zerotier免费实现内网穿透，远程管理NAS中心！-知乎 (zhihu.com)</a></p><p>从这里往下开始看</p><figure><img src="/images/image-20240310224518496.png"alt="image-20240310224518496" /><figcaption aria-hidden="true">image-20240310224518496</figcaption></figure><p>看到这里结束</p><p><br></p><figure><img src="/images/image-20240310225006482.png"alt="image-20240310225006482" /><figcaption aria-hidden="true">image-20240310225006482</figcaption></figure><p>再回到</p><p>构建Zerotier私有根服务器(Planet)，实现比MOON更稳定的内网穿透 - 知乎(zhihu.com)</p><p>https://zhuanlan.zhihu.com/p/544807922</p><p>这个教程，看linux篇，替换一下planet</p><h5 id="感觉自己是伞兵的一些操作">感觉自己是伞兵的一些操作：</h5><p>几个小时之间记得自己明明能在命令行界面找到.qpkg但用winscp时找不到，最后发现自己没设置显示隐藏文件</p><p>nas的系统找不到service和systemctl命令，我替换planet之后没办法用命令重启zerotier服务，所以我选择在nas的appcenter里停止再重启zerotier，但我猜这样干的话他的服务进程其实也还是没有停止的，即使加入了网络，在网络的后台也看不到设备，于是又在这儿卡了一小时，</p><p>最终解决方法就是直接重启Nas，于是终于能在网络后台发现nas了</p><p><br></p><h2 id="手机安装zerotier">3.手机安装Zerotier</h2><p>Zerotier 非官方安卓客户端发布：支持自建 Moon 节点 - 知乎(zhihu.com)</p><p>https://zhuanlan.zhihu.com/p/362884740</p><p>用的这个，大佬不愧是大佬，配置起来极其方便。</p><p><br></p><h2 id="win11安装zerotier">4.win11安装Zerotier</h2><p>明明按理说应该是最简单的，但我搞了一天多了，还没成功</p><p>安装倒是没问题，但有其他的问题，首先是Node：unknown</p><p>市面上所有解决nodeunknown的方案只有几个，我都试了，没用</p><p>我研究了研究，zerotier会给电脑新建一个虚拟网卡，但我去我的网络适配器里看了看，没有</p><p>运行zerotier的时候也会闪过一个错误</p><figure><img src="/images/image-20240310225018232.png"alt="image-20240310225018232" /><figcaption aria-hidden="true">image-20240310225018232</figcaption></figure><p>找不到这个文件，我看了看，确实没有，网上说是驱动有问题，我手动安装了那个inf文件，没用，还是没有</p><p>网上说是版本问题，不适配，我下了很多其他版本，也没用。</p><p>不知道是win11的问题还是我电脑的问题</p><p><br></p><p><br></p><p>几个小时后来更新：</p><p>看这个，虽然已经装过四五个版本的了，但死马当活马医还是想试一下，于是成功了，nodeid有了</p><p>win11无法正常使用zerotier - 『悬赏问答区』 - 吾爱破解 - LCG - LSG|安卓破解|病毒分析|www.52pojie.cn</p><p>https://www.52pojie.cn/thread-1660407-1-1.html</p><p>装这个之前我卸载了深信服之类的和网卡沾那么一点边的东西，不知道是不是这个问题</p><p><br></p><figure><img src="/images/image-20240310225029560.png"alt="image-20240310225029560" /><figcaption aria-hidden="true">image-20240310225029560</figcaption></figure><p>啊这就是成功的感觉，运行的时候终于不报错了，看了看安装文件夹里也有zerotier-one.port了，就连在电脑服务里面重启zerotier服务的时候，停止和启动都比原来快超级多。</p><p><br></p><p>虽然过程是玄学的，但结果是好的。</p><p><br></p><p>ps，这个教程也不错</p><p><ahref="https://shiruixuan.gitee.io/2022/09/16/docker-zerotier-planet/">搭建私有ZeroTier Planet 根服务器（Docker 版） | shiruixuan (gitee.io)</a></p><p>pss，我为什么不用ipv6？</p><p>家里宽带是移动的，只有ipv4没有ipv6，都说要去光猫后台改，我也想顺便把我家光猫改成桥接模式，昨晚光猫和电脑用网线直连，依然进不去光猫后台，不是用户名密码不对的那种，是拒绝访问或者无响应的那种，并且猫上啥也没写，我觉得移动有可能是直接给用户堵死了这条路，上网一搜在某个论坛发现有人问宽带小哥为啥进不去猫，小哥说现在都改成云防火墙了，他们现在也进不去了，我就放弃了。</p><p>主要是即使用了ipv6，比起zerotier的方案还是有挺多不方便的地方。</p><p><br></p><p><br></p>]]></content>
    
    
    <categories>
      
      <category>Nas</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>标题</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>Hello there!👋</p><p>My name is LT, a senior Computer Science and Technology major atShandong University.</p><p>I have a passion for all things computer-related.</p><p>Besides being a techie, I'm also an avid movie buff and a dedicatedreader of novels.</p><p>You can think of me as a cyber hamster🐹, perpetually scurryingthrough the boundless corridors of the internet.</p><p>I run my own public WeChat account "LT想吃黑芝麻汤圆,"</p><p>My amateur radio call sign is BI4ISA,</p><p>and I am on my journey to becoming a full-stack engineer.👩🏻‍💻</p><p>Should you wish to reach out, my email is sdtaltt@163.com. I would bedelighted to connect.</p>]]></content>
    
  </entry>
  
  
  
</search>
